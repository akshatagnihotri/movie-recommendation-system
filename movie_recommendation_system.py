# -*- coding: utf-8 -*-
"""MOVIE RECOMMENDATION SYSTEM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h7yxONS_Df_h9nDonCuSIYYiH9NpRxof

MOVIE RECOMMENDATION SYSTEM: THE FULL BLUEPRINT

1. Problem Statement
Recommend movies to users based on their preferences, past ratings, or similarity to other movies

IMPORTING LIBRARIES
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

movies_df = pd.read_csv('Movies.csv')
credits_df = pd.read_csv('Credit.csv')

print("Movies DataFrame:")
print(movies_df.shape)
print(movies_df.head())

print("\nCredits DataFrame:")
print(credits_df.shape)
print(credits_df.head())

credits_df.shape

#merge the data set
movies_df = movies_df.merge(credits_df,on='title')

movies_df

#removing  unwanted columns:
movies_df = movies_df[['movie_id','title','overview','genres','keywords','cast','crew']]

movies_df

movies_df.isnull().sum()

movies_df.dropna(subset="overview",inplace=True)

movies_df.isnull().sum()

#take out only keywords
import ast
def convert(text):
    L = []
    for i in ast.literal_eval(text):
        L.append(i['name'])
    return L

movies_df['genres'] = movies_df['genres'].apply(convert)
movies_df.head()

movies_df['keywords'] = movies_df['keywords'].apply(convert)
movies_df.head()

#take out director name from crew column:
def fetch_director(text):
    L = []
    for i in ast.literal_eval(text):
        if i['job'] == 'Director':
            L.append(i['name'])
    return L

movies_df['crew'] = movies_df['crew'].apply(fetch_director)

movies_df

movies_df.info()

def fetch_cast(obj):
    L = []
    count = 0
    for i in ast.literal_eval(obj):
        if count != 3:
            L.append(i['name'])
            count += 1
        else:
            break
    return L

movies_df['cast'] = movies_df['cast'].apply(fetch_cast)
movies_df.head()

#convert string into list
movies_df['overview']=movies_df['overview'].apply(lambda x:x.split())

movies_df.head()

movies_df['genres']=movies_df['genres'].apply(lambda x:[i.replace(" ","") for i in x])
movies_df['keywords']=movies_df['keywords'].apply(lambda x:[i.replace(" ","") for i in x])
movies_df['cast']=movies_df['cast'].apply(lambda x:[i.replace(" ","") for i in x])
movies_df['crew']=movies_df['crew'].apply(lambda x:[i.replace(" ","") for i in x])

movies_df

movies_df.shape

movies_df['tags'] = movies_df['overview'] + movies_df['genres'] + movies_df['keywords'] + movies_df['cast'] + movies_df['crew']

movies_df

#next step
df=movies_df[['movie_id','title','tags']]

df.shape

movies_df['tags'] = movies_df['tags'].apply(lambda x: ' '.join(x))

movies_df.head()

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=5000,stop_words='english')
vectors = cv.fit_transform(movies_df['tags']).toarray()
vectors[0]
vectors.shape
cv.get_feature_names_out()

from sklearn.metrics.pairwise import cosine_similarity

cosine_similarity(vectors).shape

similarity = cosine_similarity(vectors) #store the similarity matrix

similarity[0]

def recommend(movie):
  index=df[df['title']==movie].index[0]
  distances=sorted(list(enumerate(similarity[index])),reverse=True,key=lambda x:x[1])
  for i in distances[1:6]:
    print(df.iloc[i[0]].title)

recommend('Spectre')